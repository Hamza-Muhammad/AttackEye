// Copyright 2021 Jeff Foley. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

package scripting

import (
	"io"
	"net"
	"strings"
	"testing"
	"time"

	"github.com/OWASP/Amass/v3/requests"
)

func TestSocketRecv(t *testing.T) {
	ctx, sys := setupMockScriptEnv(`
		name="recv"
		type="testing"

		function vertical(ctx, domain)
			local conn, err = socket.connect(ctx, "127.0.0.1", 8080, "tcp")
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			end

			local data
			data, err = conn:recv(15)
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			elseif data ~= "Hello unit test" then
				log(ctx, "failed to recv the data: " .. data)
			end

			log(ctx, "success")
			conn:close()
		end
	`)
	if ctx == nil || sys == nil {
		t.Fatal("failed to initialize the scripting environment")
	}
	defer func() { _ = sys.Shutdown() }()

	cfg, bus, err := requests.ContextConfigBus(ctx)
	if err != nil {
		t.Fatal("failed to obtain the config and event bus")
	}

	errch := make(chan string)
	fn := func(msg string) {
		errch <- msg
	}

	bus.Subscribe(requests.LogTopic, fn)
	defer bus.Unsubscribe(requests.LogTopic, fn)

	ln, err := net.Listen("tcp", "127.0.0.1:8080")
	if err != nil {
		t.Fatal("failed to listen on port 8080")
	}
	defer ln.Close()

	go func(ln net.Listener, ch chan string) {
		conn, err := ln.Accept()
		if err != nil {
			ch <- err.Error()
			return
		}
		defer conn.Close()

		if _, err := io.WriteString(conn, "Hello unit test"); err != nil {
			ch <- err.Error()
			return
		}
	}(ln, errch)

	cfg.AddDomain("owasp.org")
	sys.DataSources()[0].Request(ctx, &requests.DNSRequest{Domain: "owasp.org"})
	// Read the initial message generated by the DNS Request
	<-errch

	timer := time.NewTimer(time.Duration(15) * time.Second)
	defer timer.Stop()

	select {
	case <-timer.C:
		t.Error("the test timed out")
	case msg := <-errch:
		if !strings.Contains(msg, "success") {
			t.Error(msg)
		}
	}
}

func TestSocketRecvAll(t *testing.T) {
	ctx, sys := setupMockScriptEnv(`
		name="recv_all"
		type="testing"

		function vertical(ctx, domain)
			local conn, err = socket.connect(ctx, "127.0.0.1", 8080, "tcp")
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			end

			local data
			data, err = conn:recv_all()
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			elseif data ~= "Hello unit test" then
				log(ctx, "failed to recv_all the data: " .. data)
			end

			log(ctx, "success")
			conn:close()
		end
	`)
	if ctx == nil || sys == nil {
		t.Fatal("failed to initialize the scripting environment")
	}
	defer func() { _ = sys.Shutdown() }()

	cfg, bus, err := requests.ContextConfigBus(ctx)
	if err != nil {
		t.Fatal("failed to obtain the config and event bus")
	}

	errch := make(chan string)
	fn := func(msg string) {
		errch <- msg
	}

	bus.Subscribe(requests.LogTopic, fn)
	defer bus.Unsubscribe(requests.LogTopic, fn)

	ln, err := net.Listen("tcp", "127.0.0.1:8080")
	if err != nil {
		t.Fatal("failed to listen on port 8080")
	}
	defer ln.Close()

	go func(ln net.Listener, ch chan string) {
		conn, err := ln.Accept()
		if err != nil {
			ch <- err.Error()
			return
		}
		defer conn.Close()

		if _, err := io.WriteString(conn, "Hello unit test"); err != nil {
			ch <- err.Error()
			return
		}
	}(ln, errch)

	cfg.AddDomain("owasp.org")
	sys.DataSources()[0].Request(ctx, &requests.DNSRequest{Domain: "owasp.org"})
	// Read the initial message generated by the DNS Request
	<-errch

	timer := time.NewTimer(time.Duration(15) * time.Second)
	defer timer.Stop()

	select {
	case <-timer.C:
		t.Error("the test timed out")
	case msg := <-errch:
		if !strings.Contains(msg, "success") {
			t.Error(msg)
		}
	}
}

func TestSocketSend(t *testing.T) {
	expected := "Hello unit test"
	ctx, sys := setupMockScriptEnv(`
		name="send"
		type="testing"

		function vertical(ctx, domain)
			local conn, err = socket.connect(ctx, "127.0.0.1", 8080, "tcp")
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			end

			local n
			n, err = conn:send("Hello unit test")
			if (err ~= nil and err ~= "") then
				log(ctx, err)
			elseif n == 0 then
				log(ctx, "failed to send the data")
			end
		end
	`)
	if ctx == nil || sys == nil {
		t.Fatal("failed to initialize the scripting environment")
	}
	defer func() { _ = sys.Shutdown() }()

	cfg, bus, err := requests.ContextConfigBus(ctx)
	if err != nil {
		t.Fatal("failed to obtain the config and event bus")
	}

	errch := make(chan string)
	fn := func(msg string) {
		errch <- msg
	}

	bus.Subscribe(requests.LogTopic, fn)
	defer bus.Unsubscribe(requests.LogTopic, fn)

	ln, err := net.Listen("tcp", "127.0.0.1:8080")
	if err != nil {
		t.Fatal("failed to listen on port 8080")
	}
	defer ln.Close()

	datach := make(chan string)
	go func(ln net.Listener, ch chan string) {
		conn, err := ln.Accept()
		if err != nil {
			ch <- err.Error()
			return
		}
		defer conn.Close()

		buf := make([]byte, 64)
		n, err := conn.Read(buf)
		if err != nil {
			ch <- err.Error()
			return
		}

		ch <- string(buf[:n])
	}(ln, datach)

	cfg.AddDomain("owasp.org")
	sys.DataSources()[0].Request(ctx, &requests.DNSRequest{Domain: "owasp.org"})
	// Read the initial message generated by the DNS Request
	<-errch

	timer := time.NewTimer(time.Duration(15) * time.Second)
	defer timer.Stop()

	select {
	case <-timer.C:
		t.Error("the test timed out")
	case msg := <-errch:
		t.Error(msg)
	case data := <-datach:
		if data != expected {
			t.Error(data)
		}
	}
}
